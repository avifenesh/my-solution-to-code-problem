const matSol = require("./treesGraphsAndHeaps/matrix0");
const isOneChangSol = require("./stringsAndArrays/isOneChange");
const isPermutationOfPalindrome = require("./stringsAndArrays/isPermutationOfPalindrome");
const removeDupSol = require("./linkedList/removeDup");
const sumLinkedList = require("./linkedList/sumLinkedList");
const minStack = require("./queueAndStacks/MinStack");
const largestComponent = require("./treesGraphsAndHeaps/largestComponentInGraph");
const minimalIsland = require("./treesGraphsAndHeaps/minimalIsland");
const shortestPath = require("./treesGraphsAndHeaps/shortestPath");
const sparseSearch = require("./stringsAndArrays/sparseSearch.js");
const specialQueue = require("./queueAndStacks/queueViaStack");
const listOfDepth = require("./treesGraphsAndHeaps/listOfDepth");
const isBalanced = require("./treesGraphsAndHeaps/isBalanced");
const checkBst = require("./treesGraphsAndHeaps/checkBst");
const findMutualParent = require("./treesGraphsAndHeaps/firstMutualParent");
const CallCenter = require("./OOP/CallCenter");
const Minesweeper = require("./OOP/Minesweeper");
const tripleSteps = require("./recursionAndDynamicPrograming/tripleSteps");
const robotInAGrid = require("./recursionAndDynamicPrograming/robotInAGrid");
const twoSortedArray = require("./sortingProblems/twoSortedArray");
const anagramsSort = require("./sortingProblems/anagramsSort");

matSol();
isOneChangSol();
isPermutationOfPalindrome();
removeDupSol();
sumLinkedList();
minStack();
largestComponent();
minimalIsland();
shortestPath();
sparseSearch();
specialQueue();
listOfDepth();
isBalanced();
checkBst();
findMutualParent();
CallCenter();
Minesweeper();
tripleSteps();
robotInAGrid();
twoSortedArray();
anagramsSort();
